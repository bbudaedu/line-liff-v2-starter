import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { TransportConfirmation } from '../../../components/transport/TransportConfirmation';
import { TransportOption } from '../../../types';

describe('TransportConfirmation', () => {
  const mockTransportOption: TransportOption = {
    id: 'location-1',
    eventId: 'test-event-1',
    name: 'ÂΩ∞ÂåñÁÅ´ËªäÁ´ô',
    address: 'ÂΩ∞ÂåñÁ∏£ÂΩ∞ÂåñÂ∏Ç‰∏âÊ∞ëË∑Ø1Ëôü',
    pickupTime: new Date('2024-01-15T07:30:00'),
    maxSeats: 45,
    bookedSeats: 32,
    coordinates: { lat: 24.0818, lng: 120.5387 }
  };

  const mockProps = {
    selectedTransport: mockTransportOption,
    onEdit: jest.fn(),
    onConfirm: jest.fn(),
    onCancel: jest.fn(),
    loading: false
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders confirmation interface correctly', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    expect(screen.getByText('Á¢∫Ë™ç‰∫§ÈÄöËªäÁôªË®ò')).toBeInTheDocument();
    expect(screen.getByText('Ë´ãÁ¢∫Ë™çÊÇ®ÁöÑ‰∫§ÈÄöËªäÁôªË®òË≥áË®ä')).toBeInTheDocument();
  });

  it('displays transport details correctly', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    expect(screen.getByText('ÂΩ∞ÂåñÁÅ´ËªäÁ´ô')).toBeInTheDocument();
    expect(screen.getByText('ÂΩ∞ÂåñÁ∏£ÂΩ∞ÂåñÂ∏Ç‰∏âÊ∞ëË∑Ø1Ëôü')).toBeInTheDocument();
    expect(screen.getByText('07:30')).toBeInTheDocument();
    expect(screen.getByText('Â∑≤È†êË®ÇÔºö33/45')).toBeInTheDocument();
    expect(screen.getByText('‚Äª ÂåÖÂê´ÊÇ®ÁöÑÂ∫ß‰Ωç')).toBeInTheDocument();
  });

  it('displays date and time correctly', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    // Check if date is formatted correctly (will depend on locale)
    expect(screen.getByText(/2024Âπ¥1Êúà15Êó•/)).toBeInTheDocument();
    expect(screen.getByText('07:30')).toBeInTheDocument();
  });

  it('shows important notes', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    expect(screen.getByText('ÈáçË¶ÅÊèêÈÜí')).toBeInTheDocument();
    expect(screen.getByText('Ë´ãÊèêÂâç 10 ÂàÜÈêòÂà∞ÈÅî‰∏äËªäÂú∞Èªû')).toBeInTheDocument();
    expect(screen.getByText('Ë´ãÊîúÂ∏∂Ë∫´ÂàÜË≠âÊòéÊñá‰ª∂‰ª•‰æøÊ†∏Â∞çË∫´‰ªΩ')).toBeInTheDocument();
    expect(screen.getByText('Â¶ÇÈúÄÂèñÊ∂àÊàñËÆäÊõ¥ÔºåË´ãÊñºÊ¥ªÂãïÂâç 3 Â§©ËÅØÁπ´‰∏ªËæ¶ÂñÆ‰Ωç')).toBeInTheDocument();
    expect(screen.getByText('‰∫§ÈÄöËªäÂ∞áÊ∫ñÊôÇÁôºËªäÔºåË´ãÂãøÈÅ≤Âà∞')).toBeInTheDocument();
  });

  it('handles edit button click', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    const editButton = screen.getByText('ÈáçÊñ∞ÈÅ∏Êìá');
    fireEvent.click(editButton);
    
    expect(mockProps.onEdit).toHaveBeenCalled();
  });

  it('handles confirm button click', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    const confirmButton = screen.getByText('Á¢∫Ë™çÁôªË®ò');
    fireEvent.click(confirmButton);
    
    expect(mockProps.onConfirm).toHaveBeenCalled();
  });

  it('handles cancel button click', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    const cancelButton = screen.getByText('ÂèñÊ∂à‰∫§ÈÄöËªäÁôªË®ò');
    fireEvent.click(cancelButton);
    
    expect(mockProps.onCancel).toHaveBeenCalled();
  });

  it('disables buttons when loading', () => {
    const loadingProps = {
      ...mockProps,
      loading: true
    };

    render(<TransportConfirmation {...loadingProps} />);
    
    expect(screen.getByText('ÈáçÊñ∞ÈÅ∏Êìá')).toBeDisabled();
    expect(screen.getByText('Á¢∫Ë™çÁôªË®ò')).toBeDisabled();
    expect(screen.getByText('ÂèñÊ∂à‰∫§ÈÄöËªäÁôªË®ò')).toBeDisabled();
  });

  it('shows loading state on confirm button', () => {
    const loadingProps = {
      ...mockProps,
      loading: true
    };

    render(<TransportConfirmation {...loadingProps} />);
    
    // The button should show loading state (implementation depends on Button component)
    const confirmButton = screen.getByText('Á¢∫Ë™çÁôªË®ò');
    expect(confirmButton).toBeDisabled();
  });

  it('displays no transport option correctly', () => {
    const noTransportProps = {
      ...mockProps,
      selectedTransport: null
    };

    render(<TransportConfirmation {...noTransportProps} />);
    
    expect(screen.getByText('Ëá™Ë°åÂâçÂæÄ')).toBeInTheDocument();
    expect(screen.getByText('ÊÇ®ÈÅ∏ÊìáËá™Ë°åÂâçÂæÄÊ¥ªÂãïÂú∞ÈªûÔºåË´ãÊ≥®ÊÑèÊ¥ªÂãïÊôÇÈñìÂíåÂú∞ÈªûË≥áË®ä„ÄÇ')).toBeInTheDocument();
    expect(screen.getByText('Ë´ãÊèêÂâçË¶èÂäÉ‰∫§ÈÄöË∑ØÁ∑ö')).toBeInTheDocument();
    expect(screen.getByText('Âª∫Ë≠∞ÊèêÂâç 30 ÂàÜÈêòÂà∞ÈÅîÊ¥ªÂãïÂú∞Èªû')).toBeInTheDocument();
    expect(screen.getByText('Â¶ÇÊúâÂÅúËªäÈúÄÊ±ÇÔºåË´ãÊèêÂâç‰∫ÜËß£ÂÅúËªäË≥áË®ä')).toBeInTheDocument();
  });

  it('shows car emoji for no transport option', () => {
    const noTransportProps = {
      ...mockProps,
      selectedTransport: null
    };

    render(<TransportConfirmation {...noTransportProps} />);
    
    expect(screen.getByText('üöó')).toBeInTheDocument();
  });

  it('shows cancel note', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    expect(screen.getByText('ÂèñÊ∂àÂæåÊÇ®ÂèØ‰ª•Á®çÂæåÈáçÊñ∞ÁôªË®ò‰∫§ÈÄöËªä')).toBeInTheDocument();
  });

  it('formats pickup time correctly for different times', () => {
    const differentTimeTransport = {
      ...mockTransportOption,
      pickupTime: new Date('2024-01-15T14:45:00')
    };

    const propsWithDifferentTime = {
      ...mockProps,
      selectedTransport: differentTimeTransport
    };

    render(<TransportConfirmation {...propsWithDifferentTime} />);
    
    expect(screen.getByText('14:45')).toBeInTheDocument();
  });

  it('calculates seat count correctly including user seat', () => {
    render(<TransportConfirmation {...mockProps} />);
    
    // Original bookedSeats: 32, with user: 33, total: 45
    expect(screen.getByText('Â∑≤È†êË®ÇÔºö33/45')).toBeInTheDocument();
  });
});